using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DisertationFEPrototype.Model.Structure
{
    public class Node : ICloneable
    {
        int id;
        double x;
        double y;
        double z;

        /// <summary>
        /// Original to indicate node was there in the inital model before any refinement occured
        /// Heuristic means the node was generated by application of an ILP rule.
        /// Stress means the node was generated by the application of stress based refinement
        /// </summary>
        public enum Origin
        {
            Original,
            Heuristic,
            Stress
        }

        Origin nodeOrigin = Origin.Original;
       
        /// <summary>
        /// Update or retrieve the origin of this Node.
        /// </summary>
        public Origin NodeOrigin
        {
            get
            {
                return this.nodeOrigin;
            }
            set
            {
                this.nodeOrigin = value;
            }
        }

        public object Clone()
        {
            return new Node(this.id, this.x, this.y, this.z);
        }
        public int Id
        {
            get {return this.id; }
            set {this.id = value;}
        }

        public double GetX { get { return this.x; } }

        public double GetY { get { return this.y; } }

        public double GetZ { get { return this.z; } }


        /// <summary> 
        /// Get the euclidean distance between two nodes (Points)
        /// </summary>
        /// <param name="a">Node a</param>
        /// <param name="b">Node b</param>
        /// <returns></returns>
        public double distanceTo(Node b)
        {
            try
            {
                return Math.Sqrt(Math.Pow((this.GetX - b.GetX), 2) 
                    + Math.Pow((this.GetY - b.GetY), 2) 
                    + Math.Pow((this.GetZ - b.GetZ), 2));
            }
            catch (Exception e)
            {
                throw new Exception("Could not compute distance from NodeA to NodeB, are you sure both nodes have x, y z values specified?");
            }
        }


        /// <summary>
        /// Compute the cross product using two nodes a and b
        /// </summary>
        /// <param name="a">Node a</param>
        /// <param name="b">Node b</param>
        /// <returns></returns>
        public Tuple<double, double, double> crossProduct(Node b)
        {
            double x = this.GetY * b.GetZ - this.GetZ * b.GetY;
            double y = this.GetZ * b.GetX - this.GetX * b.GetZ;
            double z = this.GetX * b.GetY - this.GetY * b.GetX;
            return new Tuple<double, double, double>(x, y, z);
        }

        public double dot(Node b)
        {
            return this.GetX * b.GetX + this.GetY * b.GetY + this.GetZ * b.GetZ;
        }
        public double dotProduct(Tuple<double, double, double> b)
        {
            return this.GetX * b.Item1 + this.GetY * b.Item2 + this.GetZ * b.Item3;
        }

        public Node(int id, double x, double y, double z)
        {
            this.id = id;
            this.x = x;
            this.y = y;
            this.z = z;

        }
        public Node(Node node)
        {
            this.id = node.id;
            this.x = node.x;
            this.y = node.y;
            this.z = node.z;
        }
    }
}
